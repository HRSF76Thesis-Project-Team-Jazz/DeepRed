
const pieceScore = isEndGame => ({
  P: (!isEndGame) ? 2 : 3.75,
  N: 9.25,
  B: 9.75,
  R: 15,
  Q: 23.75,
  K: (!isEndGame) ? 2 : 6.5,
});

/**
 * Keep track of relative captured pieces score
 * Assign numerical values to pieces and compare players' captures
 * @param {array} capturedWhite : black pieces captured by white player
 * @param {array} capturedBlack : white pieces captured by black player
 * @return {float}    (+) = white advantage
 *                    (-) = black advantage
 */

const capturedPiecesScore = (capturedWhite, capturedBlack) => {
  let whiteScore = 0;
  let blackScore = 0;
  const isEndGame = (capturedWhite.length + capturedBlack.length) >= 16;

  const score = pieceScore(isEndGame);

  capturedWhite.forEach((piece) => { whiteScore += score[piece[1]]; });
  capturedBlack.forEach((piece) => { blackScore += score[piece[1]]; });

  return whiteScore - blackScore;
};

const transcribeBoard = board => board.map((row) => {
  const pieceIndex = {
    null: 0,
    WP: 1,
    WN: 2,
    WB: 3,
    WR: 4,
    WQ: 5,
    WK: 6,
    BP: 'a',
    BN: 'b',
    BB: 'c',
    BR: 'd',
    BQ: 'e',
    BK: 'f',
  };
  const newRow = row.map(col => pieceIndex[col]);
  return newRow.join('');
}).join('');

const code = {
  WN: '0',
  WB: '1',
  WR: '2',
  WQ: '3',
  WK: '4',
  BN: '5',
  BB: '6',
  BR: '7',
  BQ: '8',
  BK: '9',
  WP: 'A',
  WP2: 'B',
  WP3: 'C',
  WP4: 'D',
  WP5: 'E',
  WP6: 'F',
  WP7: 'G',
  WP8: 'H',
  BP: 'I',
  BP2: 'J',
  BP3: 'K',
  BP4: 'L',
  BP5: 'M',
  BP6: 'N',
  BP7: 'O',
  BP8: 'P',
  _: 'Q',
  _2: 'R',
  _3: 'S',
  _4: 'T',
  _5: 'U',
  _6: 'V',
  _7: 'W',
  _8: 'X',
  _9: 'Y',
  _10: 'Z',
  _11: 'a',
  _12: 'b',
  _13: 'c',
  _14: 'd',
  _15: 'e',
  _16: 'f',
  _17: 'g',
  _18: 'h',
  _19: 'i',
  _20: 'j',
  _21: 'k',
  _22: 'l',
  _23: 'm',
  _24: 'n',
  _25: 'o',
  _26: 'p',
  _27: 'q',
  _28: 'r',
  _29: 's',
  _30: 't',
  _31: 'u',
  _32: 'v',
  _33: 'w',
  _34: 'x',
  _35: 'y',
  _36: 'z',
  _37: '!',
  _38: '{',
  _39: '#',
  _40: '$',
  _41: '%',
  _42: '&',
  _43: '(',
  _44: ')',
  _45: '*',
  _46: '+',
  _47: ',',
  _48: '-',
  _49: '.',
  _50: '/',
  _51: ':',
  _52: ';',
  _53: '<',
  _54: '=',
  _55: '>',
  _56: '?',
  _57: '@',
  _58: '[',
  _59: '|',
  _60: ']',
  _61: '^',
  _62: '_',
};

const decode = {
  0: 'WN',
  1: 'WB',
  2: 'WR',
  3: 'WQ',
  4: 'WK',
  5: 'BN',
  6: 'BB',
  7: 'BR',
  8: 'BQ',
  9: 'BK',
  A: 'WP',
  B: 'WP|WP',
  C: 'WP|WP|WP',
  D: 'WP|WP|WP|WP',
  E: 'WP|WP|WP|WP|WP',
  F: 'WP|WP|WP|WP|WP|WP',
  G: 'WP|WP|WP|WP|WP|WP|WP',
  H: 'WP|WP|WP|WP|WP|WP|WP|WP',
  I: 'BP',
  J: 'BP|BP',
  K: 'BP|BP|BP',
  L: 'BP|BP|BP|BP',
  M: 'BP|BP|BP|BP|BP',
  N: 'BP|BP|BP|BP|BP|BP',
  O: 'BP|BP|BP|BP|BP|BP|BP',
  P: 'BP|BP|BP|BP|BP|BP|BP|BP',
  Q: '_',
  R: '_|_',
  S: '_|_|_',
  T: '_|_|_|_',
  U: '_|_|_|_|_',
  V: '_|_|_|_|_|_',
  W: '_|_|_|_|_|_|_',
  X: '_|_|_|_|_|_|_|_',
  Y: '_|_|_|_|_|_|_|_|_',
  Z: '_|_|_|_|_|_|_|_|_|_',
  a: '_|_|_|_|_|_|_|_|_|_|_',
  b: '_|_|_|_|_|_|_|_|_|_|_|_',
  c: '_|_|_|_|_|_|_|_|_|_|_|_|_',
  d: '_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  e: '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  f: '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  g: '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  h: '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  i: '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  j: '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  k: '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  l: '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  m: '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  n: '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  o: '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  p: '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  q: '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  r: '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  s: '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  t: '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  u: '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  v: '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  w: '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  x: '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  y: '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  z: '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  '!': '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  '{': '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  '#': '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  $: '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  '%': '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  '&': '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  '(': '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  ')': '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  '*': '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  '+': '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  ',': '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  '-': '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  '.': '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  '/': '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  ':': '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  ';': '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  '<': '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  '=': '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  '>': '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  '?': '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  '@': '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  '[': '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  '|': '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  ']': '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  '^': '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
  '_': '_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_',
};

const encodeBoard = (board) => {

  const boardArray = [].concat.apply([], board);

  let storage = '';
  let count = 1;
  let result = '';

  boardArray.forEach(piece => {
    if (piece === null) {
      piece = '_';
    }
    if (piece === storage) {
      count += 1;
    } else if (count > 1 && piece !== '_' && piece[1] !== 'P') {
      result += code[storage + count];
      result += code[piece];
      count = 1;
    } else if (count > 1 && (piece === '_' || piece[1] === 'P')) {
      result += code[storage + count];
      count = 1;
    } else {
      result += code[piece];
      count = 1;
    }
    if (piece === '_' || piece[1] === 'P') {
      storage = piece;
    } else {
      storage = '';
    }
  });
  return result;
};

const decodeBoard = (code) => {
  let string = '';
  for (let i = 0; i < code.length; i += 1) {
    string += `${(i === 0) ? '' : '|'}${decode[code[i]]}`;
  }

  const array = string.split('|');
  console.log(string);
  console.log(array.length, array);
  const board = [];

  for (let i = 0; i < 8; i += 1) {
    console.log(array);
    board.push(array.splice(0, 8));
  }

  return board;
};

const board = [
  ['BR', 'BN', 'BB', 'BK', 'BQ', 'BB', 'BN', 'BR'],
  ['BP', 'BP', 'BP', 'BP', 'BP', 'BP', 'BP', 'BP'],
  [null, null, null, null, null, null, null, null],
  [null, null, null, null, null, null, null, null],
  [null, null, null, null, null, null, null, null],
  [null, null, null, null, null, null, null, null],
  ['WP', 'WP', 'WP', 'WP', 'WP', 'WP', 'WP', 'WP'],
  ['WR', 'WN', 'WB', 'WK', 'WQ', 'WB', 'WN', 'WR'],
];

const encoded = encodeBoard(board);
console.log(encoded);
console.log(decodeBoard(encoded));

module.exports = {
  capturedPiecesScore,
  transcribeBoard,
  encodeBoard,
};
